{"version":3,"sources":["enums/FilterOptions.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterOption","TodoItem","todo","showTodo","selectedTodo","id","completed","title","isTodoSelected","className","cn","type","onClick","TodoList","todos","map","TodoFilter","filterOption","setFilterOption","setQuery","query","value","onChange","event","target","All","Active","Completed","placeholder","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","userId","closeModal","useState","user","setUser","isLoading","setIsLoading","useEffect","getUser","selectedUser","catch","Error","href","email","name","App","setTodos","setSelectedTodo","todosFromServer","visibleTodos","useMemo","filter","searchQuery","toLowerCase","includes","trim","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f167b22.chunk.js","sourcesContent":["export enum FilterOption {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  showTodo: (todo: Todo) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo, showTodo, selectedTodo }) => {\n  const { id, completed, title } = todo;\n  const isTodoSelected = selectedTodo && selectedTodo.id === id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({ 'has-background-info-light': isTodoSelected })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-danger': !completed, 'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            showTodo(todo);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye-slash': isTodoSelected,\n              'fa-eye': !isTodoSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  showTodo: (todo: Todo) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, showTodo, selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          showTodo={showTodo}\n          selectedTodo={selectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { Dispatch, SetStateAction } from 'react';\nimport { FilterOption } from '../../enums/FilterOptions';\n\ntype Props = {\n  filterOption: string,\n  query: string,\n  setFilterOption: Dispatch<SetStateAction<FilterOption>>,\n  setQuery: Dispatch<SetStateAction<string>>,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterOption, setFilterOption, setQuery, query,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={filterOption}\n            onChange={event => {\n              setFilterOption(event.target.value as FilterOption);\n            }}\n            data-cy=\"statusSelect\"\n          >\n            <option value={FilterOption.All}>All</option>\n            <option value={FilterOption.Active}>Active</option>\n            <option value={FilterOption.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\">\n          {query && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo;\n  closeModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo: {\n    id, title, userId, completed,\n  }, closeModal,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(userId)\n      .then(selectedUser => {\n        setUser(selectedUser);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        throw new Error('User not found');\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\nimport { FilterOption } from './enums/FilterOptions';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterOption, setFilterOption] = useState<FilterOption>(FilterOption.All);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        throw new Error('Todos loading is failed');\n      });\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(({ title, completed }) => {\n      const searchQuery = (\n        title.toLowerCase().includes(query.trim().toLowerCase())\n      );\n\n      switch (filterOption) {\n        case FilterOption.Active:\n          return !completed && searchQuery;\n        case FilterOption.Completed:\n          return completed && searchQuery;\n        default:\n          return searchQuery;\n      }\n    });\n  }, [todos, filterOption, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterOption={filterOption}\n                setFilterOption={setFilterOption}\n                setQuery={setQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  showTodo={(todo) => {\n                    setSelectedTodo(todo);\n                  }}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          closeModal={() => {\n            setSelectedTodo(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}